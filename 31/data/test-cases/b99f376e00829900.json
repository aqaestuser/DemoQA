{"uid":"b99f376e00829900","name":"test_select_date_and_time","fullName":"tests.test_widgets.TestDatePicker#test_select_date_and_time","historyId":"0fafd2fd1f75fefeb2c86f20c7c49431","time":{"start":1697641754961,"stop":1697641760649,"duration":5688},"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"react-datepicker__time-list-item \">...</li> is not clickable at point (549, 476). Other element would receive the click: <div>...</div>\n  (Session info: headless chrome=117.0.5938.132)\nStacktrace:\n#0 0x55de7ca7c6b3 <unknown>\n#1 0x55de7c7521e7 <unknown>\n#2 0x55de7c79f65d <unknown>\n#3 0x55de7c79d9fd <unknown>\n#4 0x55de7c79b7b8 <unknown>\n#5 0x55de7c79a827 <unknown>\n#6 0x55de7c78f4f9 <unknown>\n#7 0x55de7c7bb0c2 <unknown>\n#8 0x55de7c78ef16 <unknown>\n#9 0x55de7c7bb28e <unknown>\n#10 0x55de7c7d4322 <unknown>\n#11 0x55de7c7bae93 <unknown>\n#12 0x55de7c78d934 <unknown>\n#13 0x55de7c78e71e <unknown>\n#14 0x55de7ca41cb8 <unknown>\n#15 0x55de7ca45bf0 <unknown>\n#16 0x55de7ca5019c <unknown>\n#17 0x55de7ca46808 <unknown>\n#18 0x55de7ca1327f <unknown>\n#19 0x55de7ca6ae88 <unknown>\n#20 0x55de7ca6b059 <unknown>\n#21 0x55de7ca7b843 <unknown>\n#22 0x7fac03e94b43 <unknown>","statusTrace":"self = <tests.test_widgets.TestWidgetsPage.TestDatePicker object at 0x7f11e0086ef0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2819b104540d03d836070a63f96dd592\")>\n\n    @allure.step('Check select date and time')\n    @pytest.mark.xfail\n    def test_select_date_and_time(self, driver):\n        date_picker_page = DatePickerPage(driver, 'https://demoqa.com/date-picker')\n        date_picker_page.open()\n>       value_date_before, value_date_after = date_picker_page.select_date_and_time()\n\ntests/test_widgets.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Widgets/widgets_page.py:145: in select_date_and_time\n    self.set_date_item_from_list(self.locators.DATE_AND_TIME_TIME_LIST, random.choice(set_time.time_15))\npages/Widgets/widgets_page.py:160: in set_date_item_from_list\n    item.click()\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f11e00782b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55de7ca6b059 \\\\u003Cunknown>\\\\n#21 0x55de7ca7b843 \\\\u003Cunknown>\\\\n#22 0x7fac03e94b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"react-datepicker__time-list-item \">...</li> is not clickable at point (549, 476). Other element would receive the click: <div>...</div>\nE         (Session info: headless chrome=117.0.5938.132)\nE       Stacktrace:\nE       #0 0x55de7ca7c6b3 <unknown>\nE       #1 0x55de7c7521e7 <unknown>\nE       #2 0x55de7c79f65d <unknown>\nE       #3 0x55de7c79d9fd <unknown>\nE       #4 0x55de7c79b7b8 <unknown>\nE       #5 0x55de7c79a827 <unknown>\nE       #6 0x55de7c78f4f9 <unknown>\nE       #7 0x55de7c7bb0c2 <unknown>\nE       #8 0x55de7c78ef16 <unknown>\nE       #9 0x55de7c7bb28e <unknown>\nE       #10 0x55de7c7d4322 <unknown>\nE       #11 0x55de7c7bae93 <unknown>\nE       #12 0x55de7c78d934 <unknown>\nE       #13 0x55de7c78e71e <unknown>\nE       #14 0x55de7ca41cb8 <unknown>\nE       #15 0x55de7ca45bf0 <unknown>\nE       #16 0x55de7ca5019c <unknown>\nE       #17 0x55de7ca46808 <unknown>\nE       #18 0x55de7ca1327f <unknown>\nE       #19 0x55de7ca6ae88 <unknown>\nE       #20 0x55de7ca6b059 <unknown>\nE       #21 0x55de7ca7b843 <unknown>\nE       #22 0x7fac03e94b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1697641255085,"stop":1697641255108,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1697641754109,"stop":1697641754960,"duration":851},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"react-datepicker__time-list-item \">...</li> is not clickable at point (549, 476). Other element would receive the click: <div>...</div>\n  (Session info: headless chrome=117.0.5938.132)\nStacktrace:\n#0 0x55de7ca7c6b3 <unknown>\n#1 0x55de7c7521e7 <unknown>\n#2 0x55de7c79f65d <unknown>\n#3 0x55de7c79d9fd <unknown>\n#4 0x55de7c79b7b8 <unknown>\n#5 0x55de7c79a827 <unknown>\n#6 0x55de7c78f4f9 <unknown>\n#7 0x55de7c7bb0c2 <unknown>\n#8 0x55de7c78ef16 <unknown>\n#9 0x55de7c7bb28e <unknown>\n#10 0x55de7c7d4322 <unknown>\n#11 0x55de7c7bae93 <unknown>\n#12 0x55de7c78d934 <unknown>\n#13 0x55de7c78e71e <unknown>\n#14 0x55de7ca41cb8 <unknown>\n#15 0x55de7ca45bf0 <unknown>\n#16 0x55de7ca5019c <unknown>\n#17 0x55de7ca46808 <unknown>\n#18 0x55de7ca1327f <unknown>\n#19 0x55de7ca6ae88 <unknown>\n#20 0x55de7ca6b059 <unknown>\n#21 0x55de7ca7b843 <unknown>\n#22 0x7fac03e94b43 <unknown>","statusTrace":"self = <tests.test_widgets.TestWidgetsPage.TestDatePicker object at 0x7f11e0086ef0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2819b104540d03d836070a63f96dd592\")>\n\n    @allure.step('Check select date and time')\n    @pytest.mark.xfail\n    def test_select_date_and_time(self, driver):\n        date_picker_page = DatePickerPage(driver, 'https://demoqa.com/date-picker')\n        date_picker_page.open()\n>       value_date_before, value_date_after = date_picker_page.select_date_and_time()\n\ntests/test_widgets.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Widgets/widgets_page.py:145: in select_date_and_time\n    self.set_date_item_from_list(self.locators.DATE_AND_TIME_TIME_LIST, random.choice(set_time.time_15))\npages/Widgets/widgets_page.py:160: in set_date_item_from_list\n    item.click()\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f11e00782b0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55de7ca6b059 \\\\u003Cunknown>\\\\n#21 0x55de7ca7b843 \\\\u003Cunknown>\\\\n#22 0x7fac03e94b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"react-datepicker__time-list-item \">...</li> is not clickable at point (549, 476). Other element would receive the click: <div>...</div>\nE         (Session info: headless chrome=117.0.5938.132)\nE       Stacktrace:\nE       #0 0x55de7ca7c6b3 <unknown>\nE       #1 0x55de7c7521e7 <unknown>\nE       #2 0x55de7c79f65d <unknown>\nE       #3 0x55de7c79d9fd <unknown>\nE       #4 0x55de7c79b7b8 <unknown>\nE       #5 0x55de7c79a827 <unknown>\nE       #6 0x55de7c78f4f9 <unknown>\nE       #7 0x55de7c7bb0c2 <unknown>\nE       #8 0x55de7c78ef16 <unknown>\nE       #9 0x55de7c7bb28e <unknown>\nE       #10 0x55de7c7d4322 <unknown>\nE       #11 0x55de7c7bae93 <unknown>\nE       #12 0x55de7c78d934 <unknown>\nE       #13 0x55de7c78e71e <unknown>\nE       #14 0x55de7ca41cb8 <unknown>\nE       #15 0x55de7ca45bf0 <unknown>\nE       #16 0x55de7ca5019c <unknown>\nE       #17 0x55de7ca46808 <unknown>\nE       #18 0x55de7ca1327f <unknown>\nE       #19 0x55de7ca6ae88 <unknown>\nE       #20 0x55de7ca6b059 <unknown>\nE       #21 0x55de7ca7b843 <unknown>\nE       #22 0x7fac03e94b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Check select date and time","time":{"start":1697641754961,"stop":1697641760649,"duration":5688},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"react-datepicker__time-list-item \">...</li> is not clickable at point (549, 476). Other element would receive the click: <div>...</div>\n  (Session info: headless chrome=117.0.5938.132)\nStacktrace:\n#0 0x55de7ca7c6b3 <unknown>\n#1 0x55de7c7521e7 <unknown>\n#2 0x55de7c79f65d <unknown>\n#3 0x55de7c79d9fd <unknown>\n#4 0x55de7c79b7b8 <unknown>\n#5 0x55de7c79a827 <unknown>\n#6 0x55de7c78f4f9 <unknown>\n#7 0x55de7c7bb0c2 <unknown>\n#8 0x55de7c78ef16 <unknown>\n#9 0x55de7c7bb28e <unknown>\n#10 0x55de7c7d4322 <unknown>\n#11 0x55de7c7bae93 <unknown>\n#12 0x55de7c78d934 <unknown>\n#13 0x55de7c78e71e <unknown>\n#14 0x55de7ca41cb8 <unknown>\n#15 0x55de7ca45bf0 <unknown>\n#16 0x55de7ca5019c <unknown>\n#17 0x55de7ca46808 <unknown>\n#18 0x55de7ca1327f <unknown>\n#19 0x55de7ca6ae88 <unknown>\n#20 0x55de7ca6b059 <unknown>\n#21 0x55de7ca7b843 <unknown>\n#22 0x7fac03e94b43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/DemoQA/DemoQA/tests/test_widgets.py\", line 70, in test_select_date_and_time\n    value_date_before, value_date_after = date_picker_page.select_date_and_time()\n  File \"/home/runner/work/DemoQA/DemoQA/pages/Widgets/widgets_page.py\", line 145, in select_date_and_time\n    self.set_date_item_from_list(self.locators.DATE_AND_TIME_TIME_LIST, random.choice(set_time.time_15))\n  File \"/home/runner/work/DemoQA/DemoQA/pages/Widgets/widgets_page.py\", line 160, in set_date_item_from_list\n    item.click()\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Open page: https://demoqa.com/date-picker","time":{"start":1697641754962,"stop":1697641756652,"duration":1690},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Check element is visible","time":{"start":1697641756653,"stop":1697641756794,"duration":141},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697641756653,"stop":1697641756676,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'input[id=\"dateAndTimePickerInput\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'input[id=\"dateAndTimePickerInput\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check element is visible","time":{"start":1697641757038,"stop":1697641757119,"duration":81},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697641757038,"stop":1697641757060,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__month-read-view\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__month-read-view\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697641757190,"stop":1697641757219,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__month-option\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Check element is visible","time":{"start":1697641757357,"stop":1697641757556,"duration":199},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697641757357,"stop":1697641757389,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__year-read-view\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__year-read-view\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697641758049,"stop":1697641758191,"duration":142},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class=\"react-datepicker__year-option\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697641758414,"stop":1697641758435,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'div[class^=\"react-datepicker__day react-datepicker__day\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697641758597,"stop":1697641758643,"duration":46},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'li[class=\"react-datepicker__time-list-item \"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2819b104540d03d836070a63f96dd592\")>"}],"shouldDisplayMessage":true,"stepsCount":11,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"ca48dcefdfb78846","name":"log","source":"ca48dcefdfb78846.txt","type":"text/plain","size":361}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":12,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1697641760695,"stop":1697641760828,"duration":133},"status":"passed","steps":[],"attachments":[{"uid":"df4b55867f58e1e4","name":"Screenshot 2023-10-18 15:09:20.765123","source":"df4b55867f58e1e4.png","type":"image/png","size":95002}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"labels":[{"name":"suite","value":"Test Widgets Page"},{"name":"feature","value":"Test Date Picker"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestWidgetsPage"},{"name":"host","value":"fv-az626-327"},{"name":"thread","value":"2112-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_widgets"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"b99f376e00829900.json","parameterValues":[]}