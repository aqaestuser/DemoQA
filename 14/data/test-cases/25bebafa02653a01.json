{"uid":"25bebafa02653a01","name":"test_new_window_page","fullName":"tests.test_alert_frame_window.TestAlertFrameWindowsPage#test_new_window_page","historyId":"80e99460e88c2fa2ed9996160c5c4169","time":{"start":1695221334793,"stop":1695221464718,"duration":129925},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=117.0.5938.88)\nStacktrace:\n#0 0x5627350ff6c3 <unknown>\n#1 0x562734dd51e7 <unknown>\n#2 0x562734dcd2f3 <unknown>\n#3 0x562734dbdd17 <unknown>\n#4 0x562734dbf191 <unknown>\n#5 0x562734dbe053 <unknown>\n#6 0x562734dbd06c <unknown>\n#7 0x562734dbcfde <unknown>\n#8 0x562734dbbbe4 <unknown>\n#9 0x562734dbc06a <unknown>\n#10 0x562734dd78ce <unknown>\n#11 0x562734e57ad5 <unknown>\n#12 0x562734e3e0c2 <unknown>\n#13 0x562734e57322 <unknown>\n#14 0x562734e3de93 <unknown>\n#15 0x562734e10934 <unknown>\n#16 0x562734e1171e <unknown>\n#17 0x5627350c4cc8 <unknown>\n#18 0x5627350c8c00 <unknown>\n#19 0x5627350d31ac <unknown>\n#20 0x5627350c9818 <unknown>\n#21 0x56273509628f <unknown>\n#22 0x5627350ede98 <unknown>\n#23 0x5627350ee069 <unknown>\n#24 0x5627350fe853 <unknown>\n#25 0x7fb3b3294b43 <unknown>","statusTrace":"self = <tests.test_alert_frame_window.TestAlertFrameWindows.TestAlertFrameWindowsPage object at 0x7f896a155b10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d4347351f4d7a7bd0e0633b1993270a\")>\n\n    @allure.step('Check new window page')\n    def test_new_window_page(self, driver):\n        browser_windows_page = AlertFrameWindowsPage(driver, 'https://demoqa.com/browser-windows')\n>       browser_windows_page.open()\n\ntests/test_alert_frame_window.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:23: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f896a517940>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x5627350ee069 \\\\u003Cunknown>\\\\n#24 0x5627350fe853 \\\\u003Cunknown>\\\\n#25 0x7fb3b3294b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: headless chrome=117.0.5938.88)\nE       Stacktrace:\nE       #0 0x5627350ff6c3 <unknown>\nE       #1 0x562734dd51e7 <unknown>\nE       #2 0x562734dcd2f3 <unknown>\nE       #3 0x562734dbdd17 <unknown>\nE       #4 0x562734dbf191 <unknown>\nE       #5 0x562734dbe053 <unknown>\nE       #6 0x562734dbd06c <unknown>\nE       #7 0x562734dbcfde <unknown>\nE       #8 0x562734dbbbe4 <unknown>\nE       #9 0x562734dbc06a <unknown>\nE       #10 0x562734dd78ce <unknown>\nE       #11 0x562734e57ad5 <unknown>\nE       #12 0x562734e3e0c2 <unknown>\nE       #13 0x562734e57322 <unknown>\nE       #14 0x562734e3de93 <unknown>\nE       #15 0x562734e10934 <unknown>\nE       #16 0x562734e1171e <unknown>\nE       #17 0x5627350c4cc8 <unknown>\nE       #18 0x5627350c8c00 <unknown>\nE       #19 0x5627350d31ac <unknown>\nE       #20 0x5627350c9818 <unknown>\nE       #21 0x56273509628f <unknown>\nE       #22 0x5627350ede98 <unknown>\nE       #23 0x5627350ee069 <unknown>\nE       #24 0x5627350fe853 <unknown>\nE       #25 0x7fb3b3294b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1695221333959,"stop":1695221334793,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=117.0.5938.88)\nStacktrace:\n#0 0x5627350ff6c3 <unknown>\n#1 0x562734dd51e7 <unknown>\n#2 0x562734dcd2f3 <unknown>\n#3 0x562734dbdd17 <unknown>\n#4 0x562734dbf191 <unknown>\n#5 0x562734dbe053 <unknown>\n#6 0x562734dbd06c <unknown>\n#7 0x562734dbcfde <unknown>\n#8 0x562734dbbbe4 <unknown>\n#9 0x562734dbc06a <unknown>\n#10 0x562734dd78ce <unknown>\n#11 0x562734e57ad5 <unknown>\n#12 0x562734e3e0c2 <unknown>\n#13 0x562734e57322 <unknown>\n#14 0x562734e3de93 <unknown>\n#15 0x562734e10934 <unknown>\n#16 0x562734e1171e <unknown>\n#17 0x5627350c4cc8 <unknown>\n#18 0x5627350c8c00 <unknown>\n#19 0x5627350d31ac <unknown>\n#20 0x5627350c9818 <unknown>\n#21 0x56273509628f <unknown>\n#22 0x5627350ede98 <unknown>\n#23 0x5627350ee069 <unknown>\n#24 0x5627350fe853 <unknown>\n#25 0x7fb3b3294b43 <unknown>","statusTrace":"self = <tests.test_alert_frame_window.TestAlertFrameWindows.TestAlertFrameWindowsPage object at 0x7f896a155b10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d4347351f4d7a7bd0e0633b1993270a\")>\n\n    @allure.step('Check new window page')\n    def test_new_window_page(self, driver):\n        browser_windows_page = AlertFrameWindowsPage(driver, 'https://demoqa.com/browser-windows')\n>       browser_windows_page.open()\n\ntests/test_alert_frame_window.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/base_page.py:23: in open\n    self.driver.get(self.url)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f896a517940>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x5627350ee069 \\\\u003Cunknown>\\\\n#24 0x5627350fe853 \\\\u003Cunknown>\\\\n#25 0x7fb3b3294b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: headless chrome=117.0.5938.88)\nE       Stacktrace:\nE       #0 0x5627350ff6c3 <unknown>\nE       #1 0x562734dd51e7 <unknown>\nE       #2 0x562734dcd2f3 <unknown>\nE       #3 0x562734dbdd17 <unknown>\nE       #4 0x562734dbf191 <unknown>\nE       #5 0x562734dbe053 <unknown>\nE       #6 0x562734dbd06c <unknown>\nE       #7 0x562734dbcfde <unknown>\nE       #8 0x562734dbbbe4 <unknown>\nE       #9 0x562734dbc06a <unknown>\nE       #10 0x562734dd78ce <unknown>\nE       #11 0x562734e57ad5 <unknown>\nE       #12 0x562734e3e0c2 <unknown>\nE       #13 0x562734e57322 <unknown>\nE       #14 0x562734e3de93 <unknown>\nE       #15 0x562734e10934 <unknown>\nE       #16 0x562734e1171e <unknown>\nE       #17 0x5627350c4cc8 <unknown>\nE       #18 0x5627350c8c00 <unknown>\nE       #19 0x5627350d31ac <unknown>\nE       #20 0x5627350c9818 <unknown>\nE       #21 0x56273509628f <unknown>\nE       #22 0x5627350ede98 <unknown>\nE       #23 0x5627350ee069 <unknown>\nE       #24 0x5627350fe853 <unknown>\nE       #25 0x7fb3b3294b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Check new window page","time":{"start":1695221334793,"stop":1695221464718,"duration":129925},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=117.0.5938.88)\nStacktrace:\n#0 0x5627350ff6c3 <unknown>\n#1 0x562734dd51e7 <unknown>\n#2 0x562734dcd2f3 <unknown>\n#3 0x562734dbdd17 <unknown>\n#4 0x562734dbf191 <unknown>\n#5 0x562734dbe053 <unknown>\n#6 0x562734dbd06c <unknown>\n#7 0x562734dbcfde <unknown>\n#8 0x562734dbbbe4 <unknown>\n#9 0x562734dbc06a <unknown>\n#10 0x562734dd78ce <unknown>\n#11 0x562734e57ad5 <unknown>\n#12 0x562734e3e0c2 <unknown>\n#13 0x562734e57322 <unknown>\n#14 0x562734e3de93 <unknown>\n#15 0x562734e10934 <unknown>\n#16 0x562734e1171e <unknown>\n#17 0x5627350c4cc8 <unknown>\n#18 0x5627350c8c00 <unknown>\n#19 0x5627350d31ac <unknown>\n#20 0x5627350c9818 <unknown>\n#21 0x56273509628f <unknown>\n#22 0x5627350ede98 <unknown>\n#23 0x5627350ee069 <unknown>\n#24 0x5627350fe853 <unknown>\n#25 0x7fb3b3294b43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/DemoQA/DemoQA/tests/test_alert_frame_window.py\", line 21, in test_new_window_page\n    browser_windows_page.open()\n  File \"/home/runner/work/DemoQA/DemoQA/pages/base_page.py\", line 23, in open\n    self.driver.get(self.url)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Open page: https://demoqa.com/browser-windows","time":{"start":1695221334794,"stop":1695221464717,"duration":129923},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=117.0.5938.88)\nStacktrace:\n#0 0x5627350ff6c3 <unknown>\n#1 0x562734dd51e7 <unknown>\n#2 0x562734dcd2f3 <unknown>\n#3 0x562734dbdd17 <unknown>\n#4 0x562734dbf191 <unknown>\n#5 0x562734dbe053 <unknown>\n#6 0x562734dbd06c <unknown>\n#7 0x562734dbcfde <unknown>\n#8 0x562734dbbbe4 <unknown>\n#9 0x562734dbc06a <unknown>\n#10 0x562734dd78ce <unknown>\n#11 0x562734e57ad5 <unknown>\n#12 0x562734e3e0c2 <unknown>\n#13 0x562734e57322 <unknown>\n#14 0x562734e3de93 <unknown>\n#15 0x562734e10934 <unknown>\n#16 0x562734e1171e <unknown>\n#17 0x5627350c4cc8 <unknown>\n#18 0x5627350c8c00 <unknown>\n#19 0x5627350d31ac <unknown>\n#20 0x5627350c9818 <unknown>\n#21 0x56273509628f <unknown>\n#22 0x5627350ede98 <unknown>\n#23 0x5627350ee069 <unknown>\n#24 0x5627350fe853 <unknown>\n#25 0x7fb3b3294b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/DemoQA/DemoQA/pages/base_page.py\", line 23, in open\n    self.driver.get(self.url)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2d4347351f4d7a7bd0e0633b1993270a\")>"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1695221464749,"stop":1695221464860,"duration":111},"status":"passed","steps":[],"attachments":[{"uid":"4a30eefe62a25a74","name":"Screenshot 2023-09-20 14:51:04.805993","source":"4a30eefe62a25a74.png","type":"image/png","size":3249}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"labels":[{"name":"feature","value":"Test Alert Frame Windows Page"},{"name":"suite","value":"Test Alert Frame Windows"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestAlertFrameWindows"},{"name":"host","value":"fv-az361-253"},{"name":"thread","value":"2072-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_alert_frame_window"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"25bebafa02653a01.json","parameterValues":[]}