{"uid":"81d219e71e19d120","name":"test_check_box","fullName":"tests.test_elements.TestCheckBox#test_check_box","historyId":"5fa4e82cffb1baecffdc8771c24b4bf6","time":{"start":1697656387224,"stop":1697656545663,"duration":158439},"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Not correct checked checkboxes result","statusTrace":"self = <tests.test_elements.TestElements.TestCheckBox object at 0x7f55a09a7130>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f78203c36085cd12edb95b76f68fbc96\")>\n\n    @allure.step('Check CheckBox')\n    @pytest.mark.xfail\n    def test_check_box(self, driver):\n        check_box_page = CheckBoxPage(driver, 'https://demoqa.com/checkbox')\n        check_box_page.open()\n>       check_box_page.check_box()\n\ntests/test_elements.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/check_box_page.py:78: in check_box\n    self.assert_checkbox_input_and_output()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.Elements.check_box_page.CheckBoxPage object at 0x7f55a09d5b10>\n\n    def assert_checkbox_input_and_output(self):\n        input_checkboxes = self.get_checked_check_boxes()\n        output_checkboxes = self.get_output_result()\n        print('Comparing the results')\n>       assert input_checkboxes == output_checkboxes, 'Not correct checked checkboxes result'\nE       AssertionError: Not correct checked checkboxes result\n\npages/Elements/check_box_page.py:68: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1697655687370,"stop":1697655687387,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1697656386435,"stop":1697656387224,"duration":789},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nAssertionError: Not correct checked checkboxes result","statusTrace":"self = <tests.test_elements.TestElements.TestCheckBox object at 0x7f55a09a7130>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f78203c36085cd12edb95b76f68fbc96\")>\n\n    @allure.step('Check CheckBox')\n    @pytest.mark.xfail\n    def test_check_box(self, driver):\n        check_box_page = CheckBoxPage(driver, 'https://demoqa.com/checkbox')\n        check_box_page.open()\n>       check_box_page.check_box()\n\ntests/test_elements.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Elements/check_box_page.py:78: in check_box\n    self.assert_checkbox_input_and_output()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.Elements.check_box_page.CheckBoxPage object at 0x7f55a09d5b10>\n\n    def assert_checkbox_input_and_output(self):\n        input_checkboxes = self.get_checked_check_boxes()\n        output_checkboxes = self.get_output_result()\n        print('Comparing the results')\n>       assert input_checkboxes == output_checkboxes, 'Not correct checked checkboxes result'\nE       AssertionError: Not correct checked checkboxes result\n\npages/Elements/check_box_page.py:68: AssertionError","steps":[{"name":"Check CheckBox","time":{"start":1697656387224,"stop":1697656545663,"duration":158439},"status":"failed","statusMessage":"AssertionError: Not correct checked checkboxes result\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/DemoQA/DemoQA/tests/test_elements.py\", line 31, in test_check_box\n    check_box_page.check_box()\n  File \"/home/runner/work/DemoQA/DemoQA/pages/Elements/check_box_page.py\", line 78, in check_box\n    self.assert_checkbox_input_and_output()\n  File \"/home/runner/work/DemoQA/DemoQA/pages/Elements/check_box_page.py\", line 68, in assert_checkbox_input_and_output\n    assert input_checkboxes == output_checkboxes, 'Not correct checked checkboxes result'\n","steps":[{"name":"Open page: https://demoqa.com/checkbox","time":{"start":1697656387225,"stop":1697656542938,"duration":155713},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Remove footer","time":{"start":1697656542939,"stop":1697656542949,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Remove fixedban","time":{"start":1697656542949,"stop":1697656542961,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Check element is visible","time":{"start":1697656542961,"stop":1697656543043,"duration":82},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697656542961,"stop":1697656542980,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//button[@title=\"Expand all\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//button[@title=\"Expand all\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are visible","time":{"start":1697656543224,"stop":1697656543517,"duration":293},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//span[@class=\"rct-title\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697656545101,"stop":1697656545118,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('css selector', 'svg[class=\"rct-icon rct-icon-check\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"Check elements are present","time":{"start":1697656545489,"stop":1697656545505,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//span[@class=\"text-success\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"f78203c36085cd12edb95b76f68fbc96\")>"}],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":9,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1697656545712,"stop":1697656545827,"duration":115},"status":"passed","steps":[],"attachments":[{"uid":"dfa7f3e6d8312383","name":"Screenshot 2023-10-18 19:15:45.766099","source":"dfa7f3e6d8312383.png","type":"image/png","size":78653}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"labels":[{"name":"feature","value":"Test CheckBox"},{"name":"suite","value":"Elements"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestElements"},{"name":"host","value":"fv-az485-879"},{"name":"thread","value":"2075-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_elements"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"81d219e71e19d120.json","parameterValues":[]}