{"uid":"4bb819b120ad4999","name":"test_accordian_title_and_content","fullName":"tests.test_widgets.TestAccordian#test_accordian_title_and_content","historyId":"d4a36aaf444bf7903faa4483ff6cf480","time":{"start":1697655947512,"stop":1697655950643,"duration":3131},"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"card-header\" id=\"section2Heading\">...</div> is not clickable at point (392, 1). Other element would receive the click: <div class=\"card-header\" id=\"section3Heading\">...</div>\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x556f50b9dfb3 <unknown>\n#1 0x556f508714a7 <unknown>\n#2 0x556f508beecd <unknown>\n#3 0x556f508bd26d <unknown>\n#4 0x556f508bb028 <unknown>\n#5 0x556f508ba097 <unknown>\n#6 0x556f508aed59 <unknown>\n#7 0x556f508da942 <unknown>\n#8 0x556f508ae776 <unknown>\n#9 0x556f508dab0e <unknown>\n#10 0x556f508f3c02 <unknown>\n#11 0x556f508da713 <unknown>\n#12 0x556f508ad18b <unknown>\n#13 0x556f508adf7e <unknown>\n#14 0x556f50b638d8 <unknown>\n#15 0x556f50b67800 <unknown>\n#16 0x556f50b71cfc <unknown>\n#17 0x556f50b68418 <unknown>\n#18 0x556f50b3542f <unknown>\n#19 0x556f50b8c4e8 <unknown>\n#20 0x556f50b8c6b4 <unknown>\n#21 0x556f50b9d143 <unknown>\n#22 0x7f8c82894ac3 <unknown>","statusTrace":"self = <tests.test_widgets.TestWidgetsPage.TestAccordian object at 0x7f53d6226f50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e319112617c31e3c08caf245977b6682\")>\n\n    @allure.step('Check accordian title and content')\n    @pytest.mark.xfail\n    def test_accordian_title_and_content(self, driver):\n        accordian_page = AccordianPage(driver, 'https://demoqa.com/accordian')\n        accordian_page.open()\n        firs_tab_title, first_tab_content = accordian_page.check_accordian('first')\n>       second_tab_title, second_tab_content = accordian_page.check_accordian('second')\n\ntests/test_widgets.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Widgets/widgets_page.py:31: in check_accordian\n    section_title.click()\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f53d5015b40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x556f50b8c6b4 \\\\u003Cunknown>\\\\n#21 0x556f50b9d143 \\\\u003Cunknown>\\\\n#22 0x7f8c82894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"card-header\" id=\"section2Heading\">...</div> is not clickable at point (392, 1). Other element would receive the click: <div class=\"card-header\" id=\"section3Heading\">...</div>\nE         (Session info: headless chrome=118.0.5993.70)\nE       Stacktrace:\nE       #0 0x556f50b9dfb3 <unknown>\nE       #1 0x556f508714a7 <unknown>\nE       #2 0x556f508beecd <unknown>\nE       #3 0x556f508bd26d <unknown>\nE       #4 0x556f508bb028 <unknown>\nE       #5 0x556f508ba097 <unknown>\nE       #6 0x556f508aed59 <unknown>\nE       #7 0x556f508da942 <unknown>\nE       #8 0x556f508ae776 <unknown>\nE       #9 0x556f508dab0e <unknown>\nE       #10 0x556f508f3c02 <unknown>\nE       #11 0x556f508da713 <unknown>\nE       #12 0x556f508ad18b <unknown>\nE       #13 0x556f508adf7e <unknown>\nE       #14 0x556f50b638d8 <unknown>\nE       #15 0x556f50b67800 <unknown>\nE       #16 0x556f50b71cfc <unknown>\nE       #17 0x556f50b68418 <unknown>\nE       #18 0x556f50b3542f <unknown>\nE       #19 0x556f50b8c4e8 <unknown>\nE       #20 0x556f50b8c6b4 <unknown>\nE       #21 0x556f50b9d143 <unknown>\nE       #22 0x7f8c82894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1697655660922,"stop":1697655660941,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1697655946693,"stop":1697655947511,"duration":818},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"card-header\" id=\"section2Heading\">...</div> is not clickable at point (392, 1). Other element would receive the click: <div class=\"card-header\" id=\"section3Heading\">...</div>\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x556f50b9dfb3 <unknown>\n#1 0x556f508714a7 <unknown>\n#2 0x556f508beecd <unknown>\n#3 0x556f508bd26d <unknown>\n#4 0x556f508bb028 <unknown>\n#5 0x556f508ba097 <unknown>\n#6 0x556f508aed59 <unknown>\n#7 0x556f508da942 <unknown>\n#8 0x556f508ae776 <unknown>\n#9 0x556f508dab0e <unknown>\n#10 0x556f508f3c02 <unknown>\n#11 0x556f508da713 <unknown>\n#12 0x556f508ad18b <unknown>\n#13 0x556f508adf7e <unknown>\n#14 0x556f50b638d8 <unknown>\n#15 0x556f50b67800 <unknown>\n#16 0x556f50b71cfc <unknown>\n#17 0x556f50b68418 <unknown>\n#18 0x556f50b3542f <unknown>\n#19 0x556f50b8c4e8 <unknown>\n#20 0x556f50b8c6b4 <unknown>\n#21 0x556f50b9d143 <unknown>\n#22 0x7f8c82894ac3 <unknown>","statusTrace":"self = <tests.test_widgets.TestWidgetsPage.TestAccordian object at 0x7f53d6226f50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e319112617c31e3c08caf245977b6682\")>\n\n    @allure.step('Check accordian title and content')\n    @pytest.mark.xfail\n    def test_accordian_title_and_content(self, driver):\n        accordian_page = AccordianPage(driver, 'https://demoqa.com/accordian')\n        accordian_page.open()\n        firs_tab_title, first_tab_content = accordian_page.check_accordian('first')\n>       second_tab_title, second_tab_content = accordian_page.check_accordian('second')\n\ntests/test_widgets.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/Widgets/widgets_page.py:31: in check_accordian\n    section_title.click()\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f53d5015b40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x556f50b8c6b4 \\\\u003Cunknown>\\\\n#21 0x556f50b9d143 \\\\u003Cunknown>\\\\n#22 0x7f8c82894ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"card-header\" id=\"section2Heading\">...</div> is not clickable at point (392, 1). Other element would receive the click: <div class=\"card-header\" id=\"section3Heading\">...</div>\nE         (Session info: headless chrome=118.0.5993.70)\nE       Stacktrace:\nE       #0 0x556f50b9dfb3 <unknown>\nE       #1 0x556f508714a7 <unknown>\nE       #2 0x556f508beecd <unknown>\nE       #3 0x556f508bd26d <unknown>\nE       #4 0x556f508bb028 <unknown>\nE       #5 0x556f508ba097 <unknown>\nE       #6 0x556f508aed59 <unknown>\nE       #7 0x556f508da942 <unknown>\nE       #8 0x556f508ae776 <unknown>\nE       #9 0x556f508dab0e <unknown>\nE       #10 0x556f508f3c02 <unknown>\nE       #11 0x556f508da713 <unknown>\nE       #12 0x556f508ad18b <unknown>\nE       #13 0x556f508adf7e <unknown>\nE       #14 0x556f50b638d8 <unknown>\nE       #15 0x556f50b67800 <unknown>\nE       #16 0x556f50b71cfc <unknown>\nE       #17 0x556f50b68418 <unknown>\nE       #18 0x556f50b3542f <unknown>\nE       #19 0x556f50b8c4e8 <unknown>\nE       #20 0x556f50b8c6b4 <unknown>\nE       #21 0x556f50b9d143 <unknown>\nE       #22 0x7f8c82894ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException","steps":[{"name":"Check accordian title and content","time":{"start":1697655947512,"stop":1697655950642,"duration":3130},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"card-header\" id=\"section2Heading\">...</div> is not clickable at point (392, 1). Other element would receive the click: <div class=\"card-header\" id=\"section3Heading\">...</div>\n  (Session info: headless chrome=118.0.5993.70)\nStacktrace:\n#0 0x556f50b9dfb3 <unknown>\n#1 0x556f508714a7 <unknown>\n#2 0x556f508beecd <unknown>\n#3 0x556f508bd26d <unknown>\n#4 0x556f508bb028 <unknown>\n#5 0x556f508ba097 <unknown>\n#6 0x556f508aed59 <unknown>\n#7 0x556f508da942 <unknown>\n#8 0x556f508ae776 <unknown>\n#9 0x556f508dab0e <unknown>\n#10 0x556f508f3c02 <unknown>\n#11 0x556f508da713 <unknown>\n#12 0x556f508ad18b <unknown>\n#13 0x556f508adf7e <unknown>\n#14 0x556f50b638d8 <unknown>\n#15 0x556f50b67800 <unknown>\n#16 0x556f50b71cfc <unknown>\n#17 0x556f50b68418 <unknown>\n#18 0x556f50b3542f <unknown>\n#19 0x556f50b8c4e8 <unknown>\n#20 0x556f50b8c6b4 <unknown>\n#21 0x556f50b9d143 <unknown>\n#22 0x7f8c82894ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/DemoQA/DemoQA/tests/test_widgets.py\", line 17, in test_accordian_title_and_content\n    second_tab_title, second_tab_content = accordian_page.check_accordian('second')\n  File \"/home/runner/work/DemoQA/DemoQA/pages/Widgets/widgets_page.py\", line 31, in check_accordian\n    section_title.click()\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 345, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Open page: https://demoqa.com/accordian","time":{"start":1697655947513,"stop":1697655949099,"duration":1586},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Check element is visible","time":{"start":1697655949099,"stop":1697655949180,"duration":81},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697655949099,"stop":1697655949116,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section1Heading\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section1Heading\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check element is visible","time":{"start":1697655949378,"stop":1697655949428,"duration":50},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697655949378,"stop":1697655949392,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section1Content\"]/p')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section1Content\"]/p')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true},{"name":"Check element is visible","time":{"start":1697655949467,"stop":1697655949511,"duration":44},"status":"passed","steps":[{"name":"Check element is present","time":{"start":1697655949467,"stop":1697655949481,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section2Heading\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"locator","value":"('xpath', '//div[@id=\"section2Heading\"]')"},{"name":"timeout","value":"5"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"e319112617c31e3c08caf245977b6682\")>"}],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1697655950684,"stop":1697655950806,"duration":122},"status":"passed","steps":[],"attachments":[{"uid":"e9fc2f203e1c95df","name":"Screenshot 2023-10-18 19:05:50.745267","source":"e9fc2f203e1c95df.png","type":"image/png","size":90623}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"labels":[{"name":"suite","value":"Test Widgets Page"},{"name":"feature","value":"Test Accordian"},{"name":"tag","value":"@pytest.mark.xfail"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestWidgetsPage"},{"name":"host","value":"fv-az558-935"},{"name":"thread","value":"2062-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_widgets"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail"]},"source":"4bb819b120ad4999.json","parameterValues":[]}